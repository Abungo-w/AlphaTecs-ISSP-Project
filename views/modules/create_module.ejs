<!DOCTYPE html>
<html>
<head>
    <title>Create New Module</title>
    <link rel="stylesheet" href="/css/module_create.css">
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/case_study.css">
    <link rel="stylesheet" href="/css/quiz_form.css">
</head>
<body>
    <div class="module-creation-wrapper">
        <div class="module-creation-header">
            <h1>Create New Module</h1>
        </div>
        
        <form action="/modules/create" method="POST" onsubmit="return prepareSubmission()">
            <!-- Basic Module Info -->
            <div class="form-group">
                <label for="moduleCode">Module Code</label>
                <input type="text" id="moduleCode" name="moduleCode" class="form-input" 
                       required pattern="M-\d{2}-\d{2}-\d{2}" placeholder="M-36-58-74">
            </div>

            <div class="form-group">
                <label for="title">Module Title</label>
                <input type="text" id="title" name="title" class="form-input" required>
            </div>

            <div class="form-group">
                <label for="description">Module Description</label>
                <textarea id="description" name="description" class="form-input" rows="3" required></textarea>
            </div>

            <div class="form-group">
                <label for="duration">Duration (minutes)</label>
                <input type="number" id="duration" name="duration" class="form-input" 
                       required min="5" max="480" value="30">
            </div>

            <div class="form-group">
                <label>Module Content</label>
                <div id="moduleContent" class="editor-container"></div>
                <input type="hidden" name="content" id="hiddenModuleContent">
            </div>

            <!-- Case Study Section -->
            <div id="caseStudiesContainer">
                <div class="case-study-box" data-index="0">
                    <div class="case-study-header">
                        <div class="title-area">
                            <span class="badge">Case Study 1</span>
                            <h3>Create Case Study</h3>
                        </div>
                        <div class="header-actions">
                            <button type="button" class="btn-delete" onclick="deleteCaseStudy(this)">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="case-study-body">
                        <div class="form-field">
                            <label>Title</label>
                            <input type="text" name="caseStudy[0][title]" class="input-text" required>
                        </div>
                        
                        <div class="form-field">
                            <label>Scenario</label>
                            <div id="scenario0" class="editor-container"></div>
                            <input type="hidden" name="caseStudy[0][content]" id="hiddenScenario0">
                        </div>

                        <div class="questions-section">
                            <div class="questions-header">
                                <h4>Discussion Questions</h4>
                            </div>
                            
                            <div id="questionList0" class="questions-list"></div>

                            <button type="button" class="btn-add-question" onclick="addNewQuestion(0)">
                                <i class="fas fa-plus"></i> Add Another Question
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <button type="button" class="btn-primary-outline" onclick="addNewCaseStudy()">
                <i class="fas fa-plus"></i> Add Another Case Study
            </button>

            <!-- Include Quiz Form -->
            <%- include('./partials/quiz_form') %>

            <div class="form-actions">
                <button type="submit" class="btn-primary">Create Module</button>
            </div>
        </form>

        <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
        <script>
            let editors = {};
            let questionCount = {};

            // Initialize editors on page load
            document.addEventListener('DOMContentLoaded', () => {
                // Initialize main module editor
                editors.moduleEditor = new Quill('#moduleContent', {
                    theme: 'snow',
                    modules: {
                        toolbar: [
                            ['bold', 'italic', 'underline'],
                            ['blockquote', 'code-block'],
                            [{ 'header': [1, 2, 3, false] }],
                            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                            ['link', 'image']
                        ]
                    },
                    formats: ['bold', 'italic', 'underline', 'blockquote', 'code-block', 
                             'header', 'list', 'link', 'image'],
                });

                // Add this to format existing content
                editors.moduleEditor.clipboard.addMatcher('h1, h2, h3', function(node, delta) {
                    delta.ops.forEach(op => {
                        if (op.attributes && typeof op.attributes.header === 'string') {
                            op.attributes.header = parseInt(op.attributes.header);
                        }
                    });
                    return delta;
                });

                // Initialize first case study
                initializeCaseStudy(0);
                addNewQuestion(0);
            });

            function initializeCaseStudy(index) {
                editors[`scenario${index}`] = new Quill(`#scenario${index}`, {
                    theme: 'snow',
                    modules: {
                        toolbar: [
                            ['bold', 'italic'],
                            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                            ['link']
                        ]
                    },
                    placeholder: 'Enter scenario description...'
                });
                questionCount[index] = 0;
            }

            function addNewCaseStudy() {
                const container = document.getElementById('caseStudiesContainer');
                const index = container.children.length;
                
                const template = `
                    <div class="case-study-box" data-index="${index}">
                        <div class="case-study-header">
                            <div class="title-area">
                                <span class="badge">Case Study ${index + 1}</span>
                                <h3>Create Case Study</h3>
                            </div>
                            <div class="header-actions">
                                <button type="button" class="btn-delete" onclick="deleteCaseStudy(this)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        
                        <div class="case-study-body">
                            <div class="form-field">
                                <label>Title</label>
                                <input type="text" name="caseStudy[${index}][title]" class="input-text" required>
                            </div>
                            
                            <div class="form-field">
                                <label>Scenario</label>
                                <div id="scenario${index}" class="editor-container"></div>
                                <input type="hidden" name="caseStudy[${index}][content]" id="hiddenScenario${index}">
                            </div>

                            <div class="questions-section">
                                <div class="questions-header">
                                    <h4>Discussion Questions</h4>
                                </div>
                                
                                <div id="questionList${index}" class="questions-list"></div>

                                <button type="button" class="btn-add-question" onclick="addNewQuestion(${index})">
                                    <i class="fas fa-plus"></i> Add Another Question
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                
                container.insertAdjacentHTML('beforeend', template);
                initializeCaseStudy(index);
                addNewQuestion(index);
                updateCaseStudyNumbers();
            }

            function addNewQuestion(caseStudyIndex) {
                const container = document.getElementById(`questionList${caseStudyIndex}`);
                const questionIndex = questionCount[caseStudyIndex]++;
                
                const template = `
                    <div class="question-box">
                        <div class="question-header">
                            <span class="question-label">Q${questionIndex + 1}</span>
                            <button type="button" class="btn-delete-sm" onclick="deleteQuestion(this)">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <div class="question-content">
                            <input type="text" 
                                   name="caseStudy[${caseStudyIndex}][questions][${questionIndex}][question]" 
                                   class="input-text"
                                   placeholder="Enter your question"
                                   required>
                            <textarea name="caseStudy[${caseStudyIndex}][questions][${questionIndex}][answer]" 
                                    class="input-text answer-area"
                                    placeholder="Enter the model answer"
                                    required></textarea>
                        </div>
                    </div>
                `;
                
                container.insertAdjacentHTML('beforeend', template);
                updateQuestionNumbers(caseStudyIndex);
            }

            function deleteQuestion(button) {
                const questionBox = button.closest('.question-box');
                const questionsList = questionBox.parentElement;
                
                if (questionsList.children.length > 1) {
                    questionBox.remove();
                    updateQuestionNumbers(questionsList.id.replace('questionList', ''));
                }
            }

            function deleteCaseStudy(button) {
                const container = document.getElementById('caseStudiesContainer');
                if (container.children.length > 1) {
                    const caseStudyBox = button.closest('.case-study-box');
                    delete editors[`scenario${caseStudyBox.dataset.index}`];
                    caseStudyBox.remove();
                    updateCaseStudyNumbers();
                }
            }

            function updateQuestionNumbers(caseStudyIndex) {
                document.querySelectorAll(`#questionList${caseStudyIndex} .question-box`).forEach((box, index) => {
                    box.querySelector('.question-label').textContent = `Q${index + 1}`;
                });
            }

            function updateCaseStudyNumbers() {
                document.querySelectorAll('.case-study-box').forEach((box, index) => {
                    box.dataset.index = index;
                    box.querySelector('.badge').textContent = `Case Study ${index + 1}`;
                });
            }

            function prepareSubmission() {
                try {
                    // Get the module data
                    const moduleData = {
                        moduleCode: document.getElementById('moduleCode').value,
                        title: document.getElementById('title').value,
                        description: document.getElementById('description').value,
                        duration: parseInt(document.getElementById('duration').value),
                        content: editors.moduleEditor.root.innerHTML,
                        
                        // Process case studies
                        caseStudies: Array.from(document.querySelectorAll('.case-study-box')).map((box, index) => ({
                            title: box.querySelector(`input[name="caseStudy[${index}][title]"]`).value,
                            content: editors[`scenario${index}`].root.innerHTML,
                            questions: Array.from(box.querySelectorAll('.question-box')).map(qBox => ({
                                question: qBox.querySelector('input[type="text"]').value,
                                answer: qBox.querySelector('textarea').value
                            }))
                        })),

                        // Process quiz questions
                        quiz: Array.from(document.querySelectorAll('.question-wrapper')).map(wrapper => {
                            const question = wrapper.querySelector('input[type="text"]').value;
                            const options = Array.from(wrapper.querySelectorAll('.option-group input[type="text"]')).map(opt => opt.value);
                            const correctAnswer = wrapper.querySelector('input[type="radio"]:checked')?.value;
                            
                            if (!question || !options.every(opt => opt) || !correctAnswer) {
                                throw new Error('Please fill out all quiz questions completely');
                            }

                            return {
                                question: question,
                                options: options,
                                correctAnswer: correctAnswer === 'A' ? 0 : correctAnswer === 'B' ? 1 : correctAnswer === 'C' ? 2 : 3
                            };
                        })
                    };

                    console.log('Sending data:', moduleData); // Debug log

                    // Send data to server
                    fetch('/modules/create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify(moduleData)
                    })
                    .then(async response => {
                        const contentType = response.headers.get('content-type');
                        if (!contentType || !contentType.includes('application/json')) {
                            throw new Error('Received non-JSON response from server');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            window.location.href = `/modules/${data.moduleId}`;
                        } else {
                            throw new Error(data.message || 'Unknown error occurred');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error creating module: ' + error.message);
                    });

                } catch (error) {
                    alert(error.message);
                }

                return false; // Prevent traditional form submission
            }
        </script>
    </div>
</body>
</html>
